package com.examples.donerite.ui

import android.annotation.SuppressLint
import android.app.AlarmManager
import android.app.DatePickerDialog
import android.app.PendingIntent
import android.app.TimePickerDialog
import android.content.Context
import android.content.Intent
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.widget.Toast
import com.examples.donerite.AlarmReceiver
import com.examples.donerite.NotificationUtils
import com.examples.donerite.R
import com.examples.donerite.Task
import com.examples.donerite.TaskRepository
import com.examples.donerite.databinding.ActivityAddTaskBinding
import com.google.android.material.button.MaterialButton
import com.google.android.material.textfield.TextInputEditText
import java.text.SimpleDateFormat
import java.util.Calendar
import java.util.Locale

class AddTaskActivity : AppCompatActivity() {

    private lateinit var binding: ActivityAddTaskBinding
    private lateinit var taskRepository: TaskRepository
    private val calendar = Calendar.getInstance()
    private lateinit var dueDateInput: TextInputEditText
    val dateFormat = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())

    private lateinit var reminderInput: TextInputEditText

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityAddTaskBinding.inflate(layoutInflater)
        setContentView(binding.root)


        taskRepository = TaskRepository(this)

        val titleInput = findViewById<TextInputEditText>(R.id.taskTitleInput)
        val descriptionInput = findViewById<TextInputEditText>(R.id.taskDescriptionInput)
        dueDateInput = findViewById(R.id.taskDueDateInput)
        val priorityInput = findViewById<TextInputEditText>(R.id.taskPriorityInput)
        reminderInput = findViewById(R.id.taskReminderInput)


        dueDateInput.setOnClickListener {
            showDatePicker()
        }

        reminderInput.setOnClickListener {
            showDateTimePicker()
        }

        val saveButton = findViewById<MaterialButton>(R.id.saveButton)
        saveButton.setOnClickListener {
            val task = Task(
                id = 0, // Auto-generated by the database
                title = titleInput.text.toString(),
                description = descriptionInput.text.toString(),
              //  dueDate = calendar.time.toString(),
                dueDate = dateFormat.format(calendar.time),
                priority = priorityInput.text.toString().toInt(),
                completed = false
            )
            taskRepository.addTask(task)
            scheduleReminder(task)
            finish()
        }
    }

    private fun showDatePicker() {
        val dateSetListener = DatePickerDialog.OnDateSetListener { _, year, month, dayOfMonth ->
            calendar.set(Calendar.YEAR, year)
            calendar.set(Calendar.MONTH, month)
            calendar.set(Calendar.DAY_OF_MONTH, dayOfMonth)
            updateDueDateInput()
        }

        DatePickerDialog(
            this,
            dateSetListener,
            calendar.get(Calendar.YEAR),
            calendar.get(Calendar.MONTH),
            calendar.get(Calendar.DAY_OF_MONTH)
        ).show()
    }

    private fun updateDueDateInput() {
        dueDateInput.setText(dateFormat.format(calendar.time))
    }

    private fun showDateTimePicker() {
        val currentDateTime = Calendar.getInstance()
        val year = currentDateTime.get(Calendar.YEAR)
        val month = currentDateTime.get(Calendar.MONTH)
        val day = currentDateTime.get(Calendar.DAY_OF_MONTH)
        val hour = currentDateTime.get(Calendar.HOUR_OF_DAY)
        val minute = currentDateTime.get(Calendar.MINUTE)

        val dateTimePicker = DatePickerDialog(
            this,
            { _, selectedYear, selectedMonth, selectedDay ->
                calendar.set(Calendar.YEAR, selectedYear)
                calendar.set(Calendar.MONTH, selectedMonth)
                calendar.set(Calendar.DAY_OF_MONTH, selectedDay)

                TimePickerDialog(
                    this,
                    { _, selectedHour, selectedMinute ->
                        calendar.set(Calendar.HOUR_OF_DAY, selectedHour)
                        calendar.set(Calendar.MINUTE, selectedMinute)
                        updateReminderInput()
                    },
                    hour,
                    minute,
                    true
                ).show()
            },
            year,
            month,
            day
        )
        dateTimePicker.show()
    }




    private fun updateReminderInput() {
        val dateTimeFormat = SimpleDateFormat("yyyy-MM-dd HH:mm", Locale.getDefault())
        reminderInput.setText(dateTimeFormat.format(calendar.time))
    }

    private fun scheduleReminder(task: Task) {
        // Example of scheduling notification directly
        NotificationUtils.createNotificationChannel(this)
        val notificationTime = Calendar.getInstance()
        notificationTime.add(Calendar.MINUTE, 1) // Example: Set notification after 1 minute
        NotificationUtils.scheduleNotification(this, task, notificationTime)
    }}